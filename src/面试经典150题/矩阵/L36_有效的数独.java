package 面试经典150题.矩阵;

/**
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * <p>
 * <p>
 * 注意：
 * <p>
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * <p>
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * <p>
 * 示例 2：
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 */
public class L36_有效的数独 {

    public boolean isValidSudoku(char[][] board) {
        // 定义矩阵row[][] 存储每一行数字出现的次数 第二个维数使用10是为了存储1~9和数字保持一致
        int[][] row = new int[9][10];
        // 定义矩阵col[][] 存储每一列数字出现的次数
        int[][] col = new int[9][10];

        // 定义box[][] 存储每一个box中数字出现的次数
        int[][] box = new int[9][10];

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if(board[i][j] == '.'){
                    continue;
                }
                int currentNum = board[i][j] - '0';
                if(row[i][currentNum] == 1){
                    return false;
                }
                if(col[j][currentNum] == 1){
                    return false;
                }
                // 检查当前box是否存在这个数 关键: j/3 + (i/3)*3
                if(board[j/3 + (i/3) * 3][currentNum] == 1){
                    return false;
                }

                row[i][currentNum] = 1;
                col[j][currentNum] = 1;
                box[j/3 + (i/3) * 3][currentNum] = 1;
            }
        }
        return true;
    }
}
